// src/components/mechanic/MechanicInvoiceGenerator.tsx
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';

interface MechanicInvoiceData {
  date: string;
  period: string;
  mechanic: {
    name: string;
    id: string;
    contact: string;
    specialization: string;
  };
  stats: {
    total: number;
    pending: number;
    inProgress: number;
    completed: number;
    completionRate: number;
    highPriority: number;
    mediumPriority: number;
    lowPriority: number;
  };
  performance: {
    weeklyCompleted: number;
    monthlyCompleted: number;
    averageTime: number;
  };
  company: {
    name: string;
    address: string;
    contact: string;
  };
}

const generateMechanicReport = (data: MechanicInvoiceData) => {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text('Mechanic Performance Report', 105, 20, { align: 'center' });
  
  // Company Info
  doc.setFontSize(10);
  doc.text(data.company.name, 14, 30);
  doc.text(`Address: ${data.company.address}`, 14, 35);
  doc.text(`Contact: ${data.company.contact}`, 14, 40);
  
  // Report Details
  doc.text(`Report Date: ${data.date}`, 160, 30, { align: 'right' });
  doc.text(`Period: ${data.period}`, 160, 35, { align: 'right' });
  
  // Mechanic Info
  doc.setFontSize(14);
  doc.text('Mechanic Information', 14, 55);
  doc.setFontSize(10);
  
  autoTable(doc, {
    startY: 60,
    head: [['Name', 'ID', 'Specialization', 'Contact']],
    body: [[
      data.mechanic.name,
      data.mechanic.id,
      data.mechanic.specialization,
      data.mechanic.contact
    ]],
    theme: 'grid',
    headStyles: {
      fillColor: [59, 130, 246], // blue-500
      textColor: 255
    },
    styles: {
      cellPadding: 5,
      fontSize: 10
    }
  });
  
  // Performance Summary
  doc.setFontSize(14);
  doc.text('Performance Summary', 14, (doc as any).lastAutoTable.finalY + 15);
  
  autoTable(doc, {
    startY: (doc as any).lastAutoTable.finalY + 20,
    head: [['Metric', 'Value']],
    body: [
      ['Total Assigned', data.stats.total],
      ['Pending', data.stats.pending],
      ['In Progress', data.stats.inProgress],
      ['Completed', data.stats.completed],
      ['Completion Rate', `${data.stats.completionRate.toFixed(1)}%`],
      ['High Priority', data.stats.highPriority],
      ['Medium Priority', data.stats.mediumPriority],
      ['Low Priority', data.stats.lowPriority]
    ],
    theme: 'grid',
    headStyles: {
      fillColor: [59, 130, 246],
      textColor: 255
    },
    columnStyles: {
      1: { cellWidth: 40 }
    }
  });
  
  // Performance Metrics
  doc.setFontSize(14);
  doc.text('Performance Metrics', 14, (doc as any).lastAutoTable.finalY + 15);
  
  autoTable(doc, {
    startY: (doc as any).lastAutoTable.finalY + 20,
    head: [['Period', 'Completed Tasks', 'Avg. Time']],
    body: [
      ['This Week', data.performance.weeklyCompleted, `${data.performance.averageTime} days`],
      ['This Month', data.performance.monthlyCompleted, `${data.performance.averageTime} days`]
    ],
    theme: 'grid',
    headStyles: {
      fillColor: [59, 130, 246],
      textColor: 255
    }
  });
  
  // Footer
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text('Generated by Mechanic Dashboard System', 105, doc.internal.pageSize.height - 10, { align: 'center' });
  
  // Save the PDF
  doc.save(`mechanic_report_${data.mechanic.name}_${format(new Date(), 'yyyyMMdd')}.pdf`);
};

interface MechanicInvoiceGeneratorProps {
  mechanicData: any;
  complaints: any[];
  selectedPeriod: string;
}

const MechanicInvoiceGenerator: React.FC<MechanicInvoiceGeneratorProps> = ({ 
  mechanicData, 
  complaints,
  selectedPeriod
}) => {
  const handleGenerateReport = () => {
    const completedCount = complaints.filter(c => c.workingStatus === 'completed').length;
    const total = complaints.length;
    
    const reportData: MechanicInvoiceData = {
      date: format(new Date(), 'MMMM dd, yyyy'),
      period: selectedPeriod,
      mechanic: {
        name: mechanicData.employeeName,
        id: mechanicData.id,
        contact: mechanicData.contactNumber,
        specialization: mechanicData.fieldOfMechanic || 'General'
      },
      stats: {
        total,
        pending: complaints.filter(c => c.workingStatus === 'pending').length,
        inProgress: complaints.filter(c => 
          c.workingStatus === 'processing' || c.workingStatus === 'accept'
        ).length,
        completed: completedCount,
        completionRate: total > 0 ? (completedCount / total) * 100 : 0,
        highPriority: complaints.filter(c => c.priority === 'high').length,
        mediumPriority: complaints.filter(c => c.priority === 'medium').length,
        lowPriority: complaints.filter(c => c.priority === 'low').length
      },
      performance: {
        weeklyCompleted: complaints.filter(c => 
          c.workingStatus === 'completed' && 
          new Date(c.createdAt) >= new Date(new Date().getTime() - 7 * 24 * 60 * 60 * 1000)
        ).length,
        monthlyCompleted: complaints.filter(c => 
          c.workingStatus === 'completed' && 
          new Date(c.createdAt) >= new Date(new Date().getFullYear(), new Date().getMonth(), 1)
        ).length,
        averageTime: 2.5 
      },
      company: {
        name: 'ZENSTER',
        address: 'Kozhikode , kerala, india',
        contact: 'zenster123@gmail.com'
      }
    };
    
    generateMechanicReport(reportData);
  };

  return (
    <button 
      onClick={handleGenerateReport}
      className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
    >
      Download Performance Report
    </button>
  );
};

export default MechanicInvoiceGenerator;