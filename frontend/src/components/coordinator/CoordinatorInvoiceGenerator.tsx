// src/components/coordinator/CoordinatorInvoiceGenerator.tsx
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';

interface CoordinatorInvoiceData {
  date: string;
  period: string;
  complaintStats: {
    total: number;
    completed: number;
    pending: number;
    processing: number;
    completionRate: number;
  };
  userStats: {
    total: number;
    active: number;
    inactive: number;
    newUsers: number;
    activePercentage: number;
  };
  topComplainers: {
    name: string;
    email: string;
    complaintCount: number;
    lastComplaintDate: string;
    statusDistribution: {
      completed: number;
      processing: number;
      pending: number;
    };
  }[];
  complaintTrends: {
    month: string;
    total: number;
    completed: number;
    pending: number;
    processing: number;
  }[];
  company: {
    name: string;
    address: string;
    contact: string;
  };
}

const generateCoordinatorReport = (data: CoordinatorInvoiceData) => {
  const doc = new jsPDF();
  
  // Header
  doc.setFontSize(20);
  doc.setTextColor(40, 40, 40);
  doc.text('Coordinator Performance Report', 105, 20, { align: 'center' });
  
  // Company Info
  doc.setFontSize(10);
  doc.text(data.company.name, 14, 30);
  doc.text(`Address: ${data.company.address}`, 14, 35);
  doc.text(`Contact: ${data.company.contact}`, 14, 40);
  
  // Report Details
  doc.text(`Report Date: ${data.date}`, 160, 30, { align: 'right' });
  doc.text(`Period: ${data.period}`, 160, 35, { align: 'right' });
  
  // Complaint Statistics
  doc.setFontSize(14);
  doc.text('Complaint Statistics', 14, 55);
  doc.setFontSize(10);
  
  autoTable(doc, {
    startY: 60,
    head: [['Metric', 'Value']],
    body: [
      ['Total Complaints', data.complaintStats.total],
      ['Completed', data.complaintStats.completed],
      ['Pending', data.complaintStats.pending],
      ['Processing', data.complaintStats.processing],
      ['Completion Rate', `${data.complaintStats.completionRate.toFixed(1)}%`]
    ],
    theme: 'grid',
    headStyles: {
      fillColor: [79, 70, 229], // indigo-600
      textColor: 255
    }
  });
  
  // User Statistics
  doc.setFontSize(14);
  doc.text('User Statistics', 14, (doc as any).lastAutoTable.finalY + 15);
  
  autoTable(doc, {
    startY: (doc as any).lastAutoTable.finalY + 20,
    head: [['Metric', 'Value']],
    body: [
      ['Total Users', data.userStats.total],
      ['Active Users', data.userStats.active],
      ['Inactive Users', data.userStats.inactive],
      ['New Users (30d)', data.userStats.newUsers],
      ['Active Percentage', `${data.userStats.activePercentage.toFixed(1)}%`]
    ],
    theme: 'grid',
    headStyles: {
      fillColor: [79, 70, 229],
      textColor: 255
    }
  });
  
  // Top Complainers
  doc.setFontSize(14);
  doc.text('Top Complainers', 14, (doc as any).lastAutoTable.finalY + 15);
  
  autoTable(doc, {
    startY: (doc as any).lastAutoTable.finalY + 20,
    head: [['Name', 'Email', 'Total', 'Last Complaint', 'Status Distribution']],
    body: data.topComplainers.map(compleiner => [
      compleiner.name,
      compleiner.email,
      compleiner.complaintCount.toString(),
      format(new Date(compleiner.lastComplaintDate), 'MMM dd, yyyy'),
      `C:${compleiner.statusDistribution.completed} P:${compleiner.statusDistribution.processing} W:${compleiner.statusDistribution.pending}`
    ]),
    theme: 'grid',
    headStyles: {
      fillColor: [79, 70, 229],
      textColor: 255
    },
    columnStyles: {
      1: { cellWidth: 40 },
      4: { cellWidth: 50 }
    }
  });
  
  // Complaint Trends
  doc.setFontSize(14);
  doc.text('Complaint Trends', 14, (doc as any).lastAutoTable.finalY + 15);
  
  autoTable(doc, {
    startY: (doc as any).lastAutoTable.finalY + 20,
    head: [['Month', 'Total', 'Completed', 'Pending', 'Processing']],
    body: data.complaintTrends.map(trend => [
      trend.month,
      trend.total.toString(),
      trend.completed.toString(),
      trend.pending.toString(),
      trend.processing.toString()
    ]),
    theme: 'grid',
    headStyles: {
      fillColor: [79, 70, 229],
      textColor: 255
    }
  });
  
  // Footer
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text('Generated by Coordinator Dashboard System', 105, doc.internal.pageSize.height - 10, { align: 'center' });
  
  // Save the PDF
  doc.save(`coordinator_report_${format(new Date(), 'yyyyMMdd')}.pdf`);
};

interface CoordinatorInvoiceGeneratorProps {
  complaints: any[];
  userStats: any;
  topComplainers: any[];
  complaintTrends: any[];
  selectedPeriod: string;
}

const CoordinatorInvoiceGenerator: React.FC<CoordinatorInvoiceGeneratorProps> = ({ 
  complaints,
  userStats,
  topComplainers,
  complaintTrends,
  selectedPeriod
}) => {
  const handleGenerateReport = () => {
    const completedCount = complaints.filter(c => c.status === 'completed').length;
    const totalComplaints = complaints.length;
    
    const reportData: CoordinatorInvoiceData = {
      date: format(new Date(), 'MMMM dd, yyyy'),
      period: selectedPeriod || 'All Time',
      complaintStats: {
        total: totalComplaints,
        completed: completedCount,
        pending: complaints.filter(c => c.status === 'pending').length,
        processing: complaints.filter(c => c.status === 'processing').length,
        completionRate: totalComplaints > 0 ? (completedCount / totalComplaints) * 100 : 0
      },
      userStats: {
        total: userStats.totalUsers || 0,
        active: userStats.activeUsers || 0,
        inactive: userStats.inactiveUsers || 0,
        newUsers: userStats.newUsers || 0,
        activePercentage: userStats.totalUsers > 0 
          ? (userStats.activeUsers / userStats.totalUsers) * 100 
          : 0
      },
      topComplainers: topComplainers.map(compleiner => ({
        name: compleiner.name,
        email: compleiner.email,
        complaintCount: compleiner.complaintCount,
        lastComplaintDate: compleiner.lastComplaintDate,
        statusDistribution: {
          completed: compleiner.statusDistribution.completed,
          processing: compleiner.statusDistribution.processing,
          pending: compleiner.statusDistribution.pending
        }
      })),
      complaintTrends: complaintTrends.map(trend => ({
        month: trend.month,
        total: trend.total,
        completed: trend.completed,
        pending: trend.pending,
        processing: trend.processing
      })),
      company: {
        name: 'Your Company Name',
        address: '123 Business St, City, Country',
        contact: 'contact@yourcompany.com'
      }
    };
    
    generateCoordinatorReport(reportData);
  };

  return (
    <button 
      onClick={handleGenerateReport}
      className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
    >
      Download Coordinator Report
    </button>
  );
};

export default CoordinatorInvoiceGenerator;